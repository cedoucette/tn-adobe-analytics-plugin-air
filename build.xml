<?xml version="1.0" encoding="UTF-8"?>
<project name="Adobe Mobile Analytics ANE" 
	basedir="."
	default="init" 
	>
	<description>Adobe Mobile Analytics ANE</description>
	
	<property file="build/build.properties" />
	<property file="build/sdk.properties" />
	
	<taskdef resource="flexTasks.tasks" classpath="${FLEX_TASKS}" />
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${basedir}/build/ant-contrib-1.0b3.jar" />
	
	
	<!--
		Steps:
		- EXTERNAL: Compile Xcode library
		- Clean workspace (build/)
		- Prepare workspace (build/)
		- Copy Xcode library from native-ios/ to as3/build/
		- Compile SWC for default, then prepare contents
		- Compile SWC for ANE, then prepare contents
		- Compile ANE
		- Copy ANE and SWC to /extensions
		- Clean workspace (build/)
		- EXTERNAL: Compile example app
	-->
	
	
	<macrodef name="clean-build-space">
		<sequential>
			
			<echo message="Delete contents of ${dir.project.build}" />
			<delete includeemptydirs="true">
				<fileset dir="${dir.project.build}" includes="**/*" />
			</delete>
			
		</sequential>
	</macrodef>
	
	
	<macrodef name="prepare-build-space">
		<sequential>
			
			<mkdir dir="${dir.project.build}/default" />
			<mkdir dir="${dir.project.build}/ios" />
			<mkdir dir="${dir.project.build}/temp" />
			
		</sequential>
	</macrodef>
	
	
	<macrodef name="prepare-platform-ios">
			<sequential>
				
				<echo message="Prepare files for iOS platform" />
				
			</sequential>
	</macrodef>
	
	
	
	<!--
	<property name="APP_NAME" value="iReadWith - Demo app" />
	<import file="../../tn-irw-build-common/build-common.xml"/>
	-->

	<!--
	<target name="main">
		
		<echo message="Lancer main.DEV, main.QA ou main.APPSTORE pour lancer un build."/>

		<antcall target="init" />
		<build-ane />
		
	</target>
	-->
	
	<target name="init">
		<!--
		<echo message="Lancer main.DEV, main.QA ou main.APPSTORE pour lancer un build."/>
		-->
		<echo message="init" />
		<!--
		<clean env="@{env}" locale="@{locale} "/>
		-->
		<sequential>
			
			<clean-build-space />
			<prepare-build-space />
			
			<prepare-platform-ios />
				
			<build-platform-default />
			<extract-library-from-swc platform="default" />
			
			<build-ane-swc />
			<extract-library-from-swc platform="ane" />
			
			<build-ane />
			
			<clean-build-space />
			
		</sequential>
		<!--
		<retrieve-dependencies/>
		-->
	</target>
	
	
	<macrodef name="build-platform-default">
			<sequential>
				
				<echo message="build-platform-default" />
				<!--
echo "Generate SWC for default implementation"
$ACOMPC -source-path $NATIVE_DEFAULT/src/ -include-classes $INCLUDE_CLASSES -swf-version=$SWFVERSION -output $ANE_HOME/build/temp/$NAME.swc

echo "Extract library from ANE SWC"
unzip $ANE_HOME/build/temp/$NAME.swc -d $ANE_HOME/build/temp/
cp $ANE_HOME/build/temp/library.swf $ANE_HOME/build/default/
rm -rf $ANE_HOME/build/temp/*
				-->
				
				
				
			</sequential>
	</macrodef>
	
	
	<macrodef name="build-ane-swc">
			<sequential>
				<echo message="build-ame-swc" />
			</sequential>
	</macrodef>
	
	<macrodef name="extract-library-from-swc">
		<attribute name="platform" />
		
		<sequential>
			<echo message="extract-library-from-swc for platform @{platform}" />
		</sequential>
	</macrodef>
	
	<macrodef name="build-ane">
			<sequential>
				
				<echo message="${WHAT_TO_BUILD}" />
				<echo message="build-ane" />
				<!-- Jenkins will pass comma separated value with the target to call (ex: main.QA,main.QA-Lite ) -->
				<for list="${WHAT_TO_BUILD}" param="targetToCall">
					<sequential>
						<echo message="building: @{targetToCall}" />
						<!--
						<antcall target="@{targetToCall}" />
						-->
					</sequential>
				</for>

			</sequential>
	</macrodef>
	
</project>